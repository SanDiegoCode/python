{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to Python\n\n\nHere you will learn the basics of python.\n\n\nFAQs\n\n\n\n\n\n\nWhere do I run the code?\n\n\n\n\nOption 1: \nInstalling Python\n  (Windows, Mac, and Linux) \n\n\nOption 2: \nCode Online with CodeSkulptor\n (All Platforms ) \n\n\nOption 3: Code using the \nside compiler\n (All Platforms)\n\n\n\n\n\n\n\n\nWhat if I need help?\n \n\n\n\n\nWe're only \nan email\n away :D\n\n\nOptionally, you can attend our bimonthly coding club meetings at the Rancho Penasquitos Library\n\n\n\n\n\n\nWhat if I'm not a part of SD Code?\n \n\n\nDon't worry about it! This resource is free to use by anyone!\n\n\n\n\n\n\nCan I host this on my website?\n\n\nSure, as long as you give credit and link it to our website\n\n\n\n\n\n\nHow can I contribute?\n\n\nSubmit a pull request to the repository on \nGithub\n\n\n\n\n\n\n\n\nCreators\n\n\n\n\nRonak Shah\n\n\nMaleeha Imran\n\n\nNir Levin", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome-to-python", 
            "text": "Here you will learn the basics of python.", 
            "title": "Welcome to Python"
        }, 
        {
            "location": "/#faqs", 
            "text": "Where do I run the code?   Option 1:  Installing Python   (Windows, Mac, and Linux)   Option 2:  Code Online with CodeSkulptor  (All Platforms )   Option 3: Code using the  side compiler  (All Platforms)     What if I need help?     We're only  an email  away :D  Optionally, you can attend our bimonthly coding club meetings at the Rancho Penasquitos Library    What if I'm not a part of SD Code?    Don't worry about it! This resource is free to use by anyone!    Can I host this on my website?  Sure, as long as you give credit and link it to our website    How can I contribute?  Submit a pull request to the repository on  Github", 
            "title": "FAQs"
        }, 
        {
            "location": "/#creators", 
            "text": "Ronak Shah  Maleeha Imran  Nir Levin", 
            "title": "Creators"
        }, 
        {
            "location": "/lesson1/", 
            "text": "Welcome!\n\n\nIn our first lesson here we will be focusing on learning about \nvariables\n and \ndata types\n. \nLet's jump right in. \n\n\nSo what exactly is a variable? You can think of variables as a box where you can store a value. A \nvalue\n is information that is related a certain variable. \n\n\nstatement = \"Hello\"\n\n\n\nNow, we have a variable called statement, with the message \"Hello\" stored inside. Making variables is pretty simple in Python. Let's print that statement now:\n\n\nprint(statement)\n\n\n\nWhen you run your program, \"Hello\" should have been printed out. \nYou can create whatever variables you want, but there are a couple rules that you need to follow when naming your variables:\n\n\n\n\n\n\nVariable names cannot start with a number. Variable names can also only contain letters, numbers, and underscores. \n\n\n\n\n\n\nNo spaces should be in your variable names.\n\n\n\n\n\n\nThere are some words that Python has kept for programming functions or keywords, like for, not, try, as, if, and more. You cannot use those words when naming your variables.\n\n\n\n\n\n\nAlright, now that we know the rules, let's learn about the different types of data. Programs deal with data a lot, so it's a good idea to understand the different types of data in Python.\n\n\nVariable Types\n\n\nStrings:\n A string is a series of characters. The way you declare, or create a string is just like how we made the variable, statement from earlier; by placing whatever message we want to have in \"quotation marks\". \n\n\n\"String\"\n\n\n\nIntegers:\n In Python, we can multiply, divide, add, and subtract integers with ease. \n\n\n2*5 \n10\n\n2/1\n2\n\n2+5\n7\n\n2-1\n1\n\n\n\nFloats:\n These are numbers with decimal points. We can peform similar operations(+, -, *, /) on floats like we could on integers, without too much trouble.\n\n\n0.2 + 1.3\n1.5\n\n\n\nHowever, we may get a large number of decimal places in the answers to our calculations. Just try to ignore them for now, all Python is doing is trying to give us the most exact number.\n\n\n0.2 + 0.1\n.3000000004\n\n\n\nAlright, now we know about a couple of different data types in Python. Now let's see what we can do with that data. \n\n\nPrinting\n\n\nA \nmethod\n, is an action that the programming language you are using, whether it be Python or Java, can perform on a certain piece of data.\n\n\nFor example, let's say that I made a string, and I wanted to change the case(A or a) of certain letters in that string. I could use a couple of different methods to make that happen.\n\n\nmyName = \"ted martinez\"\nprint(myName.title())\n\n\n\nThe method I used is title(). When I use that method, this is what Python prints out.\n\n\nTed Martinez\n\n\n\nThat small dot in front of the word title, is what makes the title() method act on the variable, myName. Sometimes, certain methods will need more information to act, that is why there are parentheses following the word title. \n\n\nHere are some other methods you can use to change your strings.\n\n\nprint(myName.lower())\nprint(myName.upper())\n\n\n\nHere is what prints out:\n\n\nted martinez\nTED MARTINEZ\n\n\n\nYou can also combine strings together, using the + sign, as shown below.\n\n\nfirst_name = \"Ted\"\nlast_name = \"Martinez\"\nfull_name = first_name + \" \" +  last_name\nprint(full_name)\n\n\n\nWe added an extra \" \" so that there could be a space between the first name and the last name.\nPython should print this out:\n\n\n\"Ted Martinez\"\n\n\n\nIf you ever want to add a tab to your text, you can add \\t when printing out a string.\n\n\nprint(\"Hello\")\nprint(\"\\tHello\")\n\n\n\nThis should print out:\n\n\nHello\n    Hello\n\n\n\nYou can also have a string break into a new line by using \\n.\n\n\nprint(\"Hello\\nMy name is\\nTed\")\n\n\n\nThis should print out:\n\n\nHello\nMy name is\nTed", 
            "title": "Lesson 1"
        }, 
        {
            "location": "/lesson1/#welcome", 
            "text": "In our first lesson here we will be focusing on learning about  variables  and  data types . \nLet's jump right in.   So what exactly is a variable? You can think of variables as a box where you can store a value. A  value  is information that is related a certain variable.   statement = \"Hello\"  Now, we have a variable called statement, with the message \"Hello\" stored inside. Making variables is pretty simple in Python. Let's print that statement now:  print(statement)  When you run your program, \"Hello\" should have been printed out. \nYou can create whatever variables you want, but there are a couple rules that you need to follow when naming your variables:    Variable names cannot start with a number. Variable names can also only contain letters, numbers, and underscores.     No spaces should be in your variable names.    There are some words that Python has kept for programming functions or keywords, like for, not, try, as, if, and more. You cannot use those words when naming your variables.    Alright, now that we know the rules, let's learn about the different types of data. Programs deal with data a lot, so it's a good idea to understand the different types of data in Python.", 
            "title": "Welcome!"
        }, 
        {
            "location": "/lesson1/#variable-types", 
            "text": "Strings:  A string is a series of characters. The way you declare, or create a string is just like how we made the variable, statement from earlier; by placing whatever message we want to have in \"quotation marks\".   \"String\"  Integers:  In Python, we can multiply, divide, add, and subtract integers with ease.   2*5 \n10 2/1\n2 2+5\n7 2-1\n1  Floats:  These are numbers with decimal points. We can peform similar operations(+, -, *, /) on floats like we could on integers, without too much trouble.  0.2 + 1.3\n1.5  However, we may get a large number of decimal places in the answers to our calculations. Just try to ignore them for now, all Python is doing is trying to give us the most exact number.  0.2 + 0.1\n.3000000004  Alright, now we know about a couple of different data types in Python. Now let's see what we can do with that data.", 
            "title": "Variable Types"
        }, 
        {
            "location": "/lesson1/#printing", 
            "text": "A  method , is an action that the programming language you are using, whether it be Python or Java, can perform on a certain piece of data.  For example, let's say that I made a string, and I wanted to change the case(A or a) of certain letters in that string. I could use a couple of different methods to make that happen.  myName = \"ted martinez\"\nprint(myName.title())  The method I used is title(). When I use that method, this is what Python prints out.  Ted Martinez  That small dot in front of the word title, is what makes the title() method act on the variable, myName. Sometimes, certain methods will need more information to act, that is why there are parentheses following the word title.   Here are some other methods you can use to change your strings.  print(myName.lower())\nprint(myName.upper())  Here is what prints out:  ted martinez\nTED MARTINEZ  You can also combine strings together, using the + sign, as shown below.  first_name = \"Ted\"\nlast_name = \"Martinez\"\nfull_name = first_name + \" \" +  last_name\nprint(full_name)  We added an extra \" \" so that there could be a space between the first name and the last name.\nPython should print this out:  \"Ted Martinez\"  If you ever want to add a tab to your text, you can add \\t when printing out a string.  print(\"Hello\")\nprint(\"\\tHello\")  This should print out:  Hello\n    Hello  You can also have a string break into a new line by using \\n.  print(\"Hello\\nMy name is\\nTed\")  This should print out:  Hello\nMy name is\nTed", 
            "title": "Printing"
        }, 
        {
            "location": "/lesson2/", 
            "text": "Lesson 2 - Control Structures/ Input-Output\n\n\nIn this lesson we'll go over basic logic and how to take in input from the user.\n\n\nFirst, we're going to introduce a new data type to you - the boolean\n\n\nBooleans\n contain either a true or false value. For example, if we wanted to make a variable that stored the value of whether it was raining or not, we'd do:\n\n\nisRaining = false\n\n\n\nBut what use is a variable if we can't do anything with it? Sure, we can print it, but that's pretty limiting. This is where \ncontrol structures\n come into play.\n\n\nControl Structure:\n if/else statement\n\n\nThese are the most used control structures you'll use, and probably the go-to one's you will need. These are best explained with an example, so I'm going to show you how to determine whether it is raining (adding onto our previous example)\n\n\nif (isRaining == True):\n    print(\"Get an umbrella!\")\nelse:\n    print(\"No umbrella needed\")\n\n\n\nAs you can see, in this piece of code, we're able to determine whether it is raining or not. Now what if we want to classify different \nlevels\n of rain? For this, we'd use an integer.\n\n\nweatherLevel = 0\n\n\n\nNow, we can rewrite the above method.\n\n\nif (weatherLevel == 0):\n    print(\"Get an umbrella!\")\nelse:\n    print(\"No umbrella needed\")\n\n\n\nAs you see here, we are using a new operator: \n==\n\n\nUnlike \n=\n, the \n==\n checks for \nequality\n, rather than assigning a value (which is what \n=\n does)\n\n\nThere are 5 types of \ncontrol operators\n\n\n\n\n\n\n\n\nOperator\n\n\nWhat it Means\n\n\n\n\n\n\n\n\n\n\n==\n\n\nEquals\n\n\n\n\n\n\n!=\n\n\nNot Equals\n\n\n\n\n\n\n\n\nGreater Than\n\n\n\n\n\n\n=\n\n\nGreater Than or Equal To\n\n\n\n\n\n\n\n\nLess Than\n\n\n\n\n\n\n=\n\n\nLess Than or Equal To\n\n\n\n\n\n\n\n\nWe can also \ncombine operators\n, using the following operators\n\n\n\n\n\n\n\n\nStructure\n\n\nWhat it does\n\n\n\n\n\n\n\n\n\n\nor\n\n\nOr\n\n\n\n\n\n\nand\n\n\nOr\n\n\n\n\n\n\n\n\nLets use these in an example.\n\n\nisRaining = True\nweatherLevel = 2\n\nif (isRaining):\n    if (weatherLevel == 1):\n        print(\"bring an umbrella\")\n    elif (weatherLevel \n= 2):\n        print(\"don't go outside!\")\nelse:\n    print(\"perfect weather!\")\n\n\n\nInput from the User\n\n\nUp until now we have defined variables like strings inside the program itself to give the computer a starting point. However, now we will be able to ask the user for input without them having to enter it inside your code.\n\n\nThe format for the input function is\n\n\ninput('prompt')\n\n\n\nWe can ask for someone's name, then output a greeting, for example:\n\n\nname = input('What is your name?\\n')\nprint('Nice to meet you, ', name)\n\n\n\nThis returns\n\n\nWhat is your name?\n\ninput\n\nNice to meet you, \ninput\n\n\n\n\nNote that \"input\" would be replaced with whatever you type in at the prompt.\n\n\nWe can do the same with numbers, for example, in this program that asks for your age:\n\n\nage = int(input('What is your age?\\n'))\n\n\n\nThe \nint\n function converts the result from the user's input (a string) to an integer.\n\n\nNow we can use what we learned about control structures to print out custom messages.\n\n\nif(age \n 0):\n    print(\"you are not born yet\")\nelif(age \n 18):\n    print(\"you're not an adult yet\")\nelif(age \n 26):\n    print(\"you're a young adult!\")\nelif(age \n 65):\n    print(\"you're an adult\")\nelse:\n    print(\"wow you're old!\")", 
            "title": "Lesson 2"
        }, 
        {
            "location": "/lesson2/#lesson-2-control-structures-input-output", 
            "text": "In this lesson we'll go over basic logic and how to take in input from the user.  First, we're going to introduce a new data type to you - the boolean  Booleans  contain either a true or false value. For example, if we wanted to make a variable that stored the value of whether it was raining or not, we'd do:  isRaining = false  But what use is a variable if we can't do anything with it? Sure, we can print it, but that's pretty limiting. This is where  control structures  come into play.  Control Structure:  if/else statement  These are the most used control structures you'll use, and probably the go-to one's you will need. These are best explained with an example, so I'm going to show you how to determine whether it is raining (adding onto our previous example)  if (isRaining == True):\n    print(\"Get an umbrella!\")\nelse:\n    print(\"No umbrella needed\")  As you can see, in this piece of code, we're able to determine whether it is raining or not. Now what if we want to classify different  levels  of rain? For this, we'd use an integer.  weatherLevel = 0  Now, we can rewrite the above method.  if (weatherLevel == 0):\n    print(\"Get an umbrella!\")\nelse:\n    print(\"No umbrella needed\")  As you see here, we are using a new operator:  ==  Unlike  = , the  ==  checks for  equality , rather than assigning a value (which is what  =  does)  There are 5 types of  control operators     Operator  What it Means      ==  Equals    !=  Not Equals     Greater Than    =  Greater Than or Equal To     Less Than    =  Less Than or Equal To     We can also  combine operators , using the following operators     Structure  What it does      or  Or    and  Or     Lets use these in an example.  isRaining = True\nweatherLevel = 2\n\nif (isRaining):\n    if (weatherLevel == 1):\n        print(\"bring an umbrella\")\n    elif (weatherLevel  = 2):\n        print(\"don't go outside!\")\nelse:\n    print(\"perfect weather!\")", 
            "title": "Lesson 2 - Control Structures/ Input-Output"
        }, 
        {
            "location": "/lesson2/#input-from-the-user", 
            "text": "Up until now we have defined variables like strings inside the program itself to give the computer a starting point. However, now we will be able to ask the user for input without them having to enter it inside your code.  The format for the input function is  input('prompt')  We can ask for someone's name, then output a greeting, for example:  name = input('What is your name?\\n')\nprint('Nice to meet you, ', name)  This returns  What is your name? input \nNice to meet you,  input   Note that \"input\" would be replaced with whatever you type in at the prompt.  We can do the same with numbers, for example, in this program that asks for your age:  age = int(input('What is your age?\\n'))  The  int  function converts the result from the user's input (a string) to an integer.  Now we can use what we learned about control structures to print out custom messages.  if(age   0):\n    print(\"you are not born yet\")\nelif(age   18):\n    print(\"you're not an adult yet\")\nelif(age   26):\n    print(\"you're a young adult!\")\nelif(age   65):\n    print(\"you're an adult\")\nelse:\n    print(\"wow you're old!\")", 
            "title": "Input from the User"
        }, 
        {
            "location": "/lesson3/", 
            "text": "Lesson 2 - Lists\n\n\nNow that we know a bit about variables and data types, we can now learn how we can put a bunch of data into one place and how to easily access it, through lists. \n\n\nSo what exactly is a \nlist\n? A \nlist\n is a group of items that are sorted in a certain order. A list usually contains more than one item, but those items can be whatever you want them to be. You can make a list of places you have visited or a list of numbers from 1-100, whatever you would like. \n\n\nLists\n\n\nIn Python, you can make a list using square brackets ([]), and inside your list, you can seperate the different items by using commas. For example, let's say we have a group that contains different flavors of ice cream. We want to put those flavors in a list. Let's call that list 'flavors'. \n\n\nflavors = ['chocolate', 'strawberry','vanilla']\n\n\n\nNow we have made a list of flavors. Let's print out that list.\n\n\nprint(flavors)\n\n\n\nWhen Python prints out the list flavors, its going to print the whole thing out, including the square brackets.\n\n\n['chocolate', 'strawberry', 'vanilla']\n\n\n\nHmm, I'm sure we could print that out in a nicer format. Let's learn how we can access different elements in a list.'\n\n\nThe elements in a list are ordered in a certain way, so we can tell Python to get a certain element from that list by telling Python the position, or index, of the element we want. To do that, all we need to do is write the name of our list, and follow it with the index in square brackets. For example, let's say I want vanilla ice cream:\n\n\nprint(flavors[2])\n\n\n\nNote: Most programming langauges including Python, consider the first item in a list, to have the position/index 0, not 1. The second item will be at index 1, the third at index 2, and so on. \n\n\nvanilla\n\n\n\nIf you want tot get the last item in a list, you can use the index, -1. \n\n\nprint(flavors[-1])\nvanilla\n\n\n\nYou can use the index -2, for the second last item in a list, and so on.\n\n\nYou can also use any String functions from our previous lesson on items in a list. Like the title() method below:\n\n\nprint(flavors[2].title())\nVanilla\n\n\n\nYou can use items in a list just like you would use any other variable.\n\n\nprint(\"My favorite ice cream flavor is \" + flavors[2])\nMy favorite ice cream flavor is vanilla\n\n\n\nChanging Items:\n In your future programs, you may need to change, add, or remove items from a list. Let's start, by saying, we want to change one of the flavors in our list, from vanilla to mint, but we do not want to change any other flavors. Here is our original list.   \n\n\nflavors = ['chocolate', 'strawberry','vanilla']\nprint(flavors)\n\n\n\nLet's change the value at index 2, from vanilla to mint.\n\n\nflavors[2] = 'mint'\nprint(flavors)\n\n\n\nHere is what happens when we print out our original list.\n\n\n['chocolate', 'strawberry', 'vanilla']\n\n\n\nAnd this is what happens when we print out our list after we changed vanilla to mint.\n\n\n['chocolate', 'strawberry', 'mint']\n\n\n\nAdding Items:\n As shown, you can change any value in a list.Now, let's say you wanted to add more items to your list. Let's say we wanted to add the flavor, berry, to our original list. We can do this in a couple different ways. \nOne way we can add an item is by using the append() method. This method will add an item to the end of our list. \n\n\nLet's print out original list again.\n\n\nprint(flavors)\n['chocolate', 'strawberry', 'vanilla']\n\n\n\nNow, let's try adding berry to the end of our flavors list.\n\n\nflavors.append('berry')\nprint(flavors)\n\n\n\nUsing the append() method will not have any effect on the other items in a list.\n\n\n['chocolate', 'strawberry', 'vanilla', 'berry']\n\n\n\nWe can use the append() method to fill out an empty list too.\nSide Note: You can make comments in Python using the # symbol, to make it easier to read through your code.\n\n\nflavors = [] #this is an empty list\nflavors.append('chocolate')\nflavors.append('strawberry')\nflavors.append('vanilla')\nflavors.append('berry')\n\nprint(flavors)\n\n\n\nThis is what will print out:\n\n\n['chocolate', 'strawberry', 'vanilla', 'berry']\n\n\n\nYou can also use the insert() method to add different items to your list. This method allows you to add an item in any index in the list. Let's try adding another flavor, mint, to the beginning of our original list.\n\n\nflavors = ['chocolate', 'strawberry', 'vanilla']\nflavors.insert(0, 'mint')\nprint(flavors)\n\n\n\nThis is what will print out:\n\n\n['mint', 'chocolate', 'strawberry', 'vanilla']\n\n\n\nRemoving Items:\n Okay, now let's say, we don't want to include the mint flavor in our list anymore. Let's learn how to remove an item from a list. You can remove an item from a list using the del statement.\n\n\nflavors = ['mint', chocolate', 'strawberry', 'vanilla']\nprint(flavors)\n\ndel flavors[0]\nprint(flavors)\n\n\n\nThis is what will print out:\n\n\n['mint', 'chocolate', 'strawberry', 'vanilla']\n['chocolate', 'strawberry', 'vanilla']\n\n\n\nYou can also use the remove() method, to remove a value from a list.\n\n\nflavors = ['mint', chocolate', 'strawberry', 'vanilla']\nprint(flavors)\n\nflavors.remove('mint')\nprint(flavors)\n\n\n\nThis is what will print out:\n\n\n['mint', 'chocolate', 'strawberry', 'vanilla']\n['chocolate', 'strawberry', 'vanilla']\n\n\n\nWe can still work with items that we store in a list. \n\n\nflavors = ['mint', chocolate', 'strawberry', 'vanilla']\nprint(flavors)\n\nfav_flavor = 'mint'\nflavors.remove(flavors[0]\nprint(flavors)\nprint(\"\\nMy favorite flavor is \" + fav_flavor) \n# the \\n is to print that statement on a new line\n\n\n\nThis is what will print out:\n\n\n['mint', 'chocolate', 'strawberry', 'vanilla']\n['chocolate', 'strawberry', 'vanilla']\n\nMy favorite flavor is vanilla\n\n\n\nYou can also remove and item but still work with it, using the pop() method. \n\n\nflavors = ['mint', chocolate', 'strawberry', 'vanilla']\nfav_flavor = flavors.pop(0)\nprint(\"My favorite flavor is \" + fav_flavor)\n\n\n\nThis is what will print out:\n\n\nMy favorite flavor is mint\n\n\n\nIf you don't put a certain index in the parentheses of the pop() method, it will remove the item at the end of the list. \n\n\nOrdering a List:\n There are also methods that you can use to order the items in your list. Let's say we want to order the flavors in our list alphabetically. We can use the sort method to do so:\n\n\nflavors = ['mint', chocolate', 'strawberry', 'vanilla']\nflavors.sort()\nprint(flavors)\n\n\n\nThis is what will print out.\n\n\n['chocolate', 'mint\", 'strawberry', 'vanilla']\n\n\n\nYou can also print the list in a reverse alphabetical order, by passing an argument in the sort method reverse, and setting it to TRUE.\n\n\nflavors = ['mint', chocolate', 'strawberry', 'vanilla']\nflavors.sort(reverse = True)\nprint(flavors)\n\n\n\nThis is what will print out.\n\n\n['vanilla', 'strawberry', 'mint', 'chocolate']\n\n\n\nYou can also use a list in a sorted order, without having to change the order of your original list, by using the sorted method. \n\n\nflavors = ['mint', chocolate', 'strawberry', 'vanilla']\nprint(flavors)\nprint(sorted(flavors))\n\n\n\nThis is what will print out:\n\n\n['mint', chocolate', 'strawberry', 'vanilla']\n['chocolate', 'mint\", 'strawberry', 'vanilla']\n\n\n\nYou can print a list out in the reverse of its original order by using the reverse() method. \n\n\nflavors = ['mint', chocolate', 'strawberry', 'vanilla']\nprint(flavors)\n\nflavors.reverse()\nprint(flavors)\n\n\n\nThis is what will print out:\n\n\n['mint', chocolate', 'strawberry', 'vanilla']\n['vanilla', 'strawberry', 'chocolate', 'mint']\n\n\n\nIf you want to find out the number of items in a list, or the length of a list, you can use the len() function:\n\n\nflavors = ['mint', chocolate', 'strawberry', 'vanilla']\nlen(flavors)\n4\n\n\n\nThat's it! Now you know the basic concepts of lists.", 
            "title": "Lesson 3"
        }, 
        {
            "location": "/lesson3/#lesson-2-lists", 
            "text": "Now that we know a bit about variables and data types, we can now learn how we can put a bunch of data into one place and how to easily access it, through lists.   So what exactly is a  list ? A  list  is a group of items that are sorted in a certain order. A list usually contains more than one item, but those items can be whatever you want them to be. You can make a list of places you have visited or a list of numbers from 1-100, whatever you would like.", 
            "title": "Lesson 2 - Lists"
        }, 
        {
            "location": "/lesson3/#lists", 
            "text": "In Python, you can make a list using square brackets ([]), and inside your list, you can seperate the different items by using commas. For example, let's say we have a group that contains different flavors of ice cream. We want to put those flavors in a list. Let's call that list 'flavors'.   flavors = ['chocolate', 'strawberry','vanilla']  Now we have made a list of flavors. Let's print out that list.  print(flavors)  When Python prints out the list flavors, its going to print the whole thing out, including the square brackets.  ['chocolate', 'strawberry', 'vanilla']  Hmm, I'm sure we could print that out in a nicer format. Let's learn how we can access different elements in a list.'  The elements in a list are ordered in a certain way, so we can tell Python to get a certain element from that list by telling Python the position, or index, of the element we want. To do that, all we need to do is write the name of our list, and follow it with the index in square brackets. For example, let's say I want vanilla ice cream:  print(flavors[2])  Note: Most programming langauges including Python, consider the first item in a list, to have the position/index 0, not 1. The second item will be at index 1, the third at index 2, and so on.   vanilla  If you want tot get the last item in a list, you can use the index, -1.   print(flavors[-1])\nvanilla  You can use the index -2, for the second last item in a list, and so on.  You can also use any String functions from our previous lesson on items in a list. Like the title() method below:  print(flavors[2].title())\nVanilla  You can use items in a list just like you would use any other variable.  print(\"My favorite ice cream flavor is \" + flavors[2])\nMy favorite ice cream flavor is vanilla  Changing Items:  In your future programs, you may need to change, add, or remove items from a list. Let's start, by saying, we want to change one of the flavors in our list, from vanilla to mint, but we do not want to change any other flavors. Here is our original list.     flavors = ['chocolate', 'strawberry','vanilla']\nprint(flavors)  Let's change the value at index 2, from vanilla to mint.  flavors[2] = 'mint'\nprint(flavors)  Here is what happens when we print out our original list.  ['chocolate', 'strawberry', 'vanilla']  And this is what happens when we print out our list after we changed vanilla to mint.  ['chocolate', 'strawberry', 'mint']  Adding Items:  As shown, you can change any value in a list.Now, let's say you wanted to add more items to your list. Let's say we wanted to add the flavor, berry, to our original list. We can do this in a couple different ways. \nOne way we can add an item is by using the append() method. This method will add an item to the end of our list.   Let's print out original list again.  print(flavors)\n['chocolate', 'strawberry', 'vanilla']  Now, let's try adding berry to the end of our flavors list.  flavors.append('berry')\nprint(flavors)  Using the append() method will not have any effect on the other items in a list.  ['chocolate', 'strawberry', 'vanilla', 'berry']  We can use the append() method to fill out an empty list too.\nSide Note: You can make comments in Python using the # symbol, to make it easier to read through your code.  flavors = [] #this is an empty list\nflavors.append('chocolate')\nflavors.append('strawberry')\nflavors.append('vanilla')\nflavors.append('berry')\n\nprint(flavors)  This is what will print out:  ['chocolate', 'strawberry', 'vanilla', 'berry']  You can also use the insert() method to add different items to your list. This method allows you to add an item in any index in the list. Let's try adding another flavor, mint, to the beginning of our original list.  flavors = ['chocolate', 'strawberry', 'vanilla']\nflavors.insert(0, 'mint')\nprint(flavors)  This is what will print out:  ['mint', 'chocolate', 'strawberry', 'vanilla']  Removing Items:  Okay, now let's say, we don't want to include the mint flavor in our list anymore. Let's learn how to remove an item from a list. You can remove an item from a list using the del statement.  flavors = ['mint', chocolate', 'strawberry', 'vanilla']\nprint(flavors)\n\ndel flavors[0]\nprint(flavors)  This is what will print out:  ['mint', 'chocolate', 'strawberry', 'vanilla']\n['chocolate', 'strawberry', 'vanilla']  You can also use the remove() method, to remove a value from a list.  flavors = ['mint', chocolate', 'strawberry', 'vanilla']\nprint(flavors)\n\nflavors.remove('mint')\nprint(flavors)  This is what will print out:  ['mint', 'chocolate', 'strawberry', 'vanilla']\n['chocolate', 'strawberry', 'vanilla']  We can still work with items that we store in a list.   flavors = ['mint', chocolate', 'strawberry', 'vanilla']\nprint(flavors)\n\nfav_flavor = 'mint'\nflavors.remove(flavors[0]\nprint(flavors)\nprint(\"\\nMy favorite flavor is \" + fav_flavor) \n# the \\n is to print that statement on a new line  This is what will print out:  ['mint', 'chocolate', 'strawberry', 'vanilla']\n['chocolate', 'strawberry', 'vanilla']\n\nMy favorite flavor is vanilla  You can also remove and item but still work with it, using the pop() method.   flavors = ['mint', chocolate', 'strawberry', 'vanilla']\nfav_flavor = flavors.pop(0)\nprint(\"My favorite flavor is \" + fav_flavor)  This is what will print out:  My favorite flavor is mint  If you don't put a certain index in the parentheses of the pop() method, it will remove the item at the end of the list.   Ordering a List:  There are also methods that you can use to order the items in your list. Let's say we want to order the flavors in our list alphabetically. We can use the sort method to do so:  flavors = ['mint', chocolate', 'strawberry', 'vanilla']\nflavors.sort()\nprint(flavors)  This is what will print out.  ['chocolate', 'mint\", 'strawberry', 'vanilla']  You can also print the list in a reverse alphabetical order, by passing an argument in the sort method reverse, and setting it to TRUE.  flavors = ['mint', chocolate', 'strawberry', 'vanilla']\nflavors.sort(reverse = True)\nprint(flavors)  This is what will print out.  ['vanilla', 'strawberry', 'mint', 'chocolate']  You can also use a list in a sorted order, without having to change the order of your original list, by using the sorted method.   flavors = ['mint', chocolate', 'strawberry', 'vanilla']\nprint(flavors)\nprint(sorted(flavors))  This is what will print out:  ['mint', chocolate', 'strawberry', 'vanilla']\n['chocolate', 'mint\", 'strawberry', 'vanilla']  You can print a list out in the reverse of its original order by using the reverse() method.   flavors = ['mint', chocolate', 'strawberry', 'vanilla']\nprint(flavors)\n\nflavors.reverse()\nprint(flavors)  This is what will print out:  ['mint', chocolate', 'strawberry', 'vanilla']\n['vanilla', 'strawberry', 'chocolate', 'mint']  If you want to find out the number of items in a list, or the length of a list, you can use the len() function:  flavors = ['mint', chocolate', 'strawberry', 'vanilla']\nlen(flavors)\n4  That's it! Now you know the basic concepts of lists.", 
            "title": "Lists"
        }, 
        {
            "location": "/lesson4/", 
            "text": "Lesson 3 - Loops\n\n\nIn the last lesson, we learned about \nlists\n, groups of items that are sorted in a certain order. In this lesson, we are going to learn about how we can easily go through the items in a list, using loops. \n\n\nLoops:\n\n\nA \nloop\n is basically a block of code with certain instructions inside that are repeated continously until a certain condition is met. Using loops, we can perform certain actions on every item in a list. For example, let's say we have a group of students, and we want to print out the name of each student in that group. It would be really annoying if we had to print out every student's name one at a time, especially if we had a really big class. We can use a loop print out each student's name with ease.\n\n\nstudents = ['john', 'rose', 'harry']\nfor student in students:\n    print(student)\n\n\n\nThe second line in this block of code, tells Python that it should take one of the names that is stored in the list 'students' and put that name in the variable 'student'. In the line after that, we tell Python to print out the name of 'student'. Python will then repeat the second and third lines for each student in the list. This is what will print out\"\n\n\njohn\nrose\nharry\n\n\n\nIn for loops, Python will look at the first value in the list \"students\" and put that value in the variable 'student'. Then, Python will look for the next instruction in the loop, which in this case, is to print out the value of the variable 'student'. Then Python will print out: john. \n\n\nThere are still more values inside of the list, don't forget about rose and harry. Python will then go back to the second value in the list, put that value in the variable 'student'. Then, it will print out the value inside 'student', which is now the second value of the list, rose. Then, because there is still one more value in the list, Python will go back and repeat the steps for harry. It will stop repeating after that, because there are no more values left in the list.\n\n\nYou can do a lot of different things inside of loops. You can also add in as many lines as you want.\n\n\nWhat if we want to do something after the loop? Well, any line after the loop that is not indented will execute once, and won't repeat.\n\n\nstudents = ['john', 'rose', 'harry']\nfor student in students:\n    print(student)\n    print(\"Nice job, \" + student.title() + \".\\n\")\n\nprint('Everyone did really well on their math quiz')\n\n\n\nThis is what will print out:\n\n\njohn\nNice job, John.\n\nrose\nNice job, Rose.\n\nharry\nNice job, Harry.\n\nEveryone did really well on their math quiz\n\n\n\nIt's important to keep in mind that we don't make any mistakes in our indentation. Here are some things to keep in mind while coding:\n\n\nPython will let you know when you forget to indent something. This is shown here:\n\n\nmagicians = ['alice', 'david', 'carolina']\nfor magician in magicians:\nprint(magician)\n\n\n\nThis will show up because we forgot to indent the print line. \n\n\nFile \"students.py\", line 3\nprint(student)\n    ^\nIndentationError: expected an indented block\n\n\n\nYou can also make a logical error with loops, as shown here below:\n\n\nstudents = ['john', 'rose', 'harry']\nfor student in students:\n    print(\"Nice job, \" + student.title() + \".\\n\")\nprint(\"I hope you do well on the next one, \" + \nstudent.title())\n\n\n\nThis is what will print out:\n\n\nNice job, John.\n\nNice job, Rose.\n\nNice job, Harry.\n\nI hope you do well on the next one, John\n\n\n\nThe last message was not repeated for rose and harry, because we did not indent that print command. \nThe code will still work, but it won't do what you wanted it to do.\n\n\nPython will also tell you if you indented something when you did not need to. For example, \n\n\nmessage = \"Hello class!\"\n    print(message)\n\n\n\nThis is what will happen:\n\n\nFile \"message.py\", line 2\nprint(message)\n^\nIndentationError: unexpected indent\n\n\n\nAlso, you will get a syntax error notification if you forget the colon after you write out your for loop. Don't forget the colon, as it is not always easy to find your mistake if you happen to forget it. \n\n\nNumerical Functions with Lists:\n Let's take a break from loops for now, and talk a bit more about lists. So far, we have made lists with String values inside of them, values inside the \" \". However, we may need to make list with other types of data. Lists can be pretty useful if we want to deal with a bunch of numbers. \n\n\nLet's suppose, we want to make a list of numbers and print them out. We can use Python's range() function, to have Python generate numbers in a certain range. For example:\n\n\nfor num in range(1, 8)\n    print(num)\n\n\n\nThis is what will print out:\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\nThe number 8 did not print out, because the range() function tells Python that it should start from the first number in the parentheses, and stop at the last one. Becasues Python stops the loop when it reaches the last number, the last number will never be printed out. If we wanted to print out the number 8 as well, we could try this:\n\n\nfor num in range(1, 9)\n    print(num)\n\n\n\nThis is what will print out:\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\nThere are a couple of functions we can use on a list of numbers. For example, we can find the minimum, maximum, and sum of a list of numbers with ease.\n\n\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]\nmin(numbers)\nmax(numbers)\nsum(numbers)\n\n\n\nThis is the output:\n\n\n0\n9\n45\n\n\n\nIf we want to split apart, or slice a list into different parts, we can use the following code to do so. Let's say we have a group of employees at a clothing store.\n\n\nworkers = ['Ava', 'Anna', 'Matt', 'Josh', 'Liz']\nprint(workers[0:3])\n\n\n\nThis is what will print out:\n\n\n['Ava', 'Anna', 'Anna']\n\n\n\nLet's say we wanted to give employees 1 to 4 a raise.\n\n\nworkers = ['Ava', 'Anna', 'Matt', 'Josh', 'Liz']\nprint(workers[1:4])\n\n\n\nThis is what will print out:\n\n\n['Anna', 'Matt', 'Josh']\n\n\n\nIf you do not put a starting index, the first number before the colon, Python will start from the beginning of the list.\n\n\nworkers = ['Ava', 'Anna', 'Matt', 'Josh', 'Liz']\nprint(workers[:4])\n\n\n\nThis is what will print out.\n\n\n['Ava', 'Anna', 'Matt', 'Josh']\n\n\n\nIf you don't put an ending index, the number after the colon, Python will go all the way to the end of the list.\n\n\nworkers = ['Ava', 'Anna', 'Matt', 'Josh', 'Liz']\nprint(workers[2:])\n\n\n\nThis is what will print out:\n\n\n['Matt', 'Josh', 'Liz']\n\n\n\nYou can also use negative indexes and Python will move from the back of the list. For example, let's say we wanted to print out the last three employees's names. \n\n\nworkers = ['Ava', 'Anna', 'Matt', 'Josh', 'Liz']\nprint(workers[-3:])\n\n\n\nThis is what will print out:\n\n\n['Matt', 'Josh', 'Liz']\n\n\n\nWe can loop through slices of lists just like we can with whole lists. \n\n\nworkers = ['Ava', 'Anna', 'Matt', 'Josh', 'Liz']\n\nprint(\"These are the employees that will get a raise\")\nfor worker in workers[:3]\n    print(worker.title())\n\n\n\nThis is what will print out:\n\n\nThese are the employees that will get a raise\nAva\nAnna\nMatt\n\n\n\nWe can also copy one list into another. Let's say that we have two students who are picking out food from a menu at a diner.\n\n\nmy_food = ['burger', 'fries', 'milkshake']\nfriend_food = [:]\n\nprint(\"I'd like to order: \")\nprint(my_food)\n\nprint('\\nAnd I'd like to order: \")\nprint(friend_food)\n\n\n\nThis is what will print out:\n\n\nI'd like to order:\n['burger', 'fries', 'milkshake']\n\nAnd I'd like to order:\n['burger', 'fries', 'milkshake']\n\n\n\nTuples:\n\nYou can treat   copies of lists as totally different lists. \nNow, as an end to this lesson, let's learn about lists that cannot change, unlike regular lists. This type of list is known as a tuple. \n\n\nWe need to use parentheses () instead of square brackets [] when defining a tuple, as shown below. Let's say we want to make a shape with certain measurements. \n\n\nsquare = (50, 50)\nprint(square[0])\nprint(square[1])\n\n\n\nIf we try to change the values of the items in the list, Python will return an error message.\n\n\nYou can loop through tuples as you would with a list. You can't change the values in a tuple, but you can redefine the tuple to contain new values.\n\n\nshape = (50, 50)\nprint(\"Dimensions:\")\nfor dimension in dimensions:\n   print(dimension)\n\nshape = (100, 100)\nprint(\"\\nNew Dimensions:\")\nfor dimension in dimensions:\n   print(dimension)\n\n\n\nThis is what will print out:\n\n\nDimensions:\n50\n50\n\nNew Dimensions\n100\n100", 
            "title": "Lesson 4"
        }, 
        {
            "location": "/lesson4/#lesson-3-loops", 
            "text": "In the last lesson, we learned about  lists , groups of items that are sorted in a certain order. In this lesson, we are going to learn about how we can easily go through the items in a list, using loops.   Loops:  A  loop  is basically a block of code with certain instructions inside that are repeated continously until a certain condition is met. Using loops, we can perform certain actions on every item in a list. For example, let's say we have a group of students, and we want to print out the name of each student in that group. It would be really annoying if we had to print out every student's name one at a time, especially if we had a really big class. We can use a loop print out each student's name with ease.  students = ['john', 'rose', 'harry']\nfor student in students:\n    print(student)  The second line in this block of code, tells Python that it should take one of the names that is stored in the list 'students' and put that name in the variable 'student'. In the line after that, we tell Python to print out the name of 'student'. Python will then repeat the second and third lines for each student in the list. This is what will print out\"  john\nrose\nharry  In for loops, Python will look at the first value in the list \"students\" and put that value in the variable 'student'. Then, Python will look for the next instruction in the loop, which in this case, is to print out the value of the variable 'student'. Then Python will print out: john.   There are still more values inside of the list, don't forget about rose and harry. Python will then go back to the second value in the list, put that value in the variable 'student'. Then, it will print out the value inside 'student', which is now the second value of the list, rose. Then, because there is still one more value in the list, Python will go back and repeat the steps for harry. It will stop repeating after that, because there are no more values left in the list.  You can do a lot of different things inside of loops. You can also add in as many lines as you want.  What if we want to do something after the loop? Well, any line after the loop that is not indented will execute once, and won't repeat.  students = ['john', 'rose', 'harry']\nfor student in students:\n    print(student)\n    print(\"Nice job, \" + student.title() + \".\\n\")\n\nprint('Everyone did really well on their math quiz')  This is what will print out:  john\nNice job, John.\n\nrose\nNice job, Rose.\n\nharry\nNice job, Harry.\n\nEveryone did really well on their math quiz  It's important to keep in mind that we don't make any mistakes in our indentation. Here are some things to keep in mind while coding:  Python will let you know when you forget to indent something. This is shown here:  magicians = ['alice', 'david', 'carolina']\nfor magician in magicians:\nprint(magician)  This will show up because we forgot to indent the print line.   File \"students.py\", line 3\nprint(student)\n    ^\nIndentationError: expected an indented block  You can also make a logical error with loops, as shown here below:  students = ['john', 'rose', 'harry']\nfor student in students:\n    print(\"Nice job, \" + student.title() + \".\\n\")\nprint(\"I hope you do well on the next one, \" + \nstudent.title())  This is what will print out:  Nice job, John.\n\nNice job, Rose.\n\nNice job, Harry.\n\nI hope you do well on the next one, John  The last message was not repeated for rose and harry, because we did not indent that print command. \nThe code will still work, but it won't do what you wanted it to do.  Python will also tell you if you indented something when you did not need to. For example,   message = \"Hello class!\"\n    print(message)  This is what will happen:  File \"message.py\", line 2\nprint(message)\n^\nIndentationError: unexpected indent  Also, you will get a syntax error notification if you forget the colon after you write out your for loop. Don't forget the colon, as it is not always easy to find your mistake if you happen to forget it.   Numerical Functions with Lists:  Let's take a break from loops for now, and talk a bit more about lists. So far, we have made lists with String values inside of them, values inside the \" \". However, we may need to make list with other types of data. Lists can be pretty useful if we want to deal with a bunch of numbers.   Let's suppose, we want to make a list of numbers and print them out. We can use Python's range() function, to have Python generate numbers in a certain range. For example:  for num in range(1, 8)\n    print(num)  This is what will print out:  1\n2\n3\n4\n5\n6\n7  The number 8 did not print out, because the range() function tells Python that it should start from the first number in the parentheses, and stop at the last one. Becasues Python stops the loop when it reaches the last number, the last number will never be printed out. If we wanted to print out the number 8 as well, we could try this:  for num in range(1, 9)\n    print(num)  This is what will print out:  1\n2\n3\n4\n5\n6\n7\n8  There are a couple of functions we can use on a list of numbers. For example, we can find the minimum, maximum, and sum of a list of numbers with ease.  numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]\nmin(numbers)\nmax(numbers)\nsum(numbers)  This is the output:  0\n9\n45  If we want to split apart, or slice a list into different parts, we can use the following code to do so. Let's say we have a group of employees at a clothing store.  workers = ['Ava', 'Anna', 'Matt', 'Josh', 'Liz']\nprint(workers[0:3])  This is what will print out:  ['Ava', 'Anna', 'Anna']  Let's say we wanted to give employees 1 to 4 a raise.  workers = ['Ava', 'Anna', 'Matt', 'Josh', 'Liz']\nprint(workers[1:4])  This is what will print out:  ['Anna', 'Matt', 'Josh']  If you do not put a starting index, the first number before the colon, Python will start from the beginning of the list.  workers = ['Ava', 'Anna', 'Matt', 'Josh', 'Liz']\nprint(workers[:4])  This is what will print out.  ['Ava', 'Anna', 'Matt', 'Josh']  If you don't put an ending index, the number after the colon, Python will go all the way to the end of the list.  workers = ['Ava', 'Anna', 'Matt', 'Josh', 'Liz']\nprint(workers[2:])  This is what will print out:  ['Matt', 'Josh', 'Liz']  You can also use negative indexes and Python will move from the back of the list. For example, let's say we wanted to print out the last three employees's names.   workers = ['Ava', 'Anna', 'Matt', 'Josh', 'Liz']\nprint(workers[-3:])  This is what will print out:  ['Matt', 'Josh', 'Liz']  We can loop through slices of lists just like we can with whole lists.   workers = ['Ava', 'Anna', 'Matt', 'Josh', 'Liz']\n\nprint(\"These are the employees that will get a raise\")\nfor worker in workers[:3]\n    print(worker.title())  This is what will print out:  These are the employees that will get a raise\nAva\nAnna\nMatt  We can also copy one list into another. Let's say that we have two students who are picking out food from a menu at a diner.  my_food = ['burger', 'fries', 'milkshake']\nfriend_food = [:]\n\nprint(\"I'd like to order: \")\nprint(my_food)\n\nprint('\\nAnd I'd like to order: \")\nprint(friend_food)  This is what will print out:  I'd like to order:\n['burger', 'fries', 'milkshake']\n\nAnd I'd like to order:\n['burger', 'fries', 'milkshake']  Tuples: \nYou can treat   copies of lists as totally different lists. \nNow, as an end to this lesson, let's learn about lists that cannot change, unlike regular lists. This type of list is known as a tuple.   We need to use parentheses () instead of square brackets [] when defining a tuple, as shown below. Let's say we want to make a shape with certain measurements.   square = (50, 50)\nprint(square[0])\nprint(square[1])  If we try to change the values of the items in the list, Python will return an error message.  You can loop through tuples as you would with a list. You can't change the values in a tuple, but you can redefine the tuple to contain new values.  shape = (50, 50)\nprint(\"Dimensions:\")\nfor dimension in dimensions:\n   print(dimension)\n\nshape = (100, 100)\nprint(\"\\nNew Dimensions:\")\nfor dimension in dimensions:\n   print(dimension)  This is what will print out:  Dimensions:\n50\n50\n\nNew Dimensions\n100\n100", 
            "title": "Lesson 3 - Loops"
        }, 
        {
            "location": "/lesson5/", 
            "text": "Lesson 5: Dictionaries\n\n\nDictionaries, are sort of like lists, which we learned about in lesson 2. However, there are a couple of key differences between the two. \n\n\n\n\nLists are ordered. Dictionaries are not. \n\n\nItems in lists are accessed through indices (0, 1, 2..) and items in dictionaries are accessed through keys. \n\n\n\n\nA dictionary can be defined as an associative array. What that means is, is that every key for a dictionary can be associated to a value. \n\n\nDictionaries can be of any type. Here is an example. Let's say we want to create a description for a student named Tom. In this description, we want to include Tom's name, age, and student ID number.\n\n\nbio = { 'name' : 'Tom', 'age': '19', 'id' : '1234567'}\nprint bio['name']\n\n\n\nThis is what would print out.\n\n\nTom\n\n\n\nWe can do the same for his age, and his id number. With dictionaries we can access items through keys. Let's look \nat the dictionary or dict we just created. \n\n\nIn bio, we have three items, Tom's name, his age, and his id number. For each item, we have a key; 'name', 'age', and 'id', that respectively associate with each value in the dictionary. Meaning, 'name' for 'Tom', 'age' for '19', and 'id' for '1234567'. \n\n\nIf we want to add more items into a list, we can do so as shown here. It's sort of similar to adding items to a list. Let's go back to our dictionary. This is what we have right now.\n\n\nbio = { 'name' : 'Tom', 'age': '19', 'id' : '1234567'}\n\n\n\nLet's say we want to add Tom's college major to the list. We can do so as shown here:\n\n\nbio['major'] = 'Math'\n\n\n\nThe structure for the statement to add an item to a dictionary is as follows: \ndictionaryname['key'] = 'value'\n. Obviously, as dictionaries can be of any type, we can make the values any type we want. We can print out values of a dictionary using : dictionaryname['key'].\n\n\nIf a value of an item in a dictionary is the same as a key in another dictionary, we can use that as a key. Meaning, let's say we have a dictionary for some U.S states. This is what the dict looks like:\n\n\nstate = {'California' : 'CA', 'Oregon' : 'OR', 'Washington' : 'WA'}\n\n\n\nLet's say we have another dictionary that has a bunch of capital cities of states.  \n\n\ncity = {'CA' : 'Sacremento', 'OR' : 'Salem', 'WA' : 'Olympia'}\n\n\n\nAs you can see, the values of the 'state' dictionary are the same as the keys for the 'city' dictionary. Therefore, let's say we want to print out the capital city of a certain state, we can do so in two ways. \n\n\nprint(city['CA'])\nprint(city[state['California']])\n\n\n\nBoth of these will print out:\n\n\nSacremento", 
            "title": "Lesson 5"
        }, 
        {
            "location": "/lesson5/#lesson-5-dictionaries", 
            "text": "Dictionaries, are sort of like lists, which we learned about in lesson 2. However, there are a couple of key differences between the two.    Lists are ordered. Dictionaries are not.   Items in lists are accessed through indices (0, 1, 2..) and items in dictionaries are accessed through keys.    A dictionary can be defined as an associative array. What that means is, is that every key for a dictionary can be associated to a value.   Dictionaries can be of any type. Here is an example. Let's say we want to create a description for a student named Tom. In this description, we want to include Tom's name, age, and student ID number.  bio = { 'name' : 'Tom', 'age': '19', 'id' : '1234567'}\nprint bio['name']  This is what would print out.  Tom  We can do the same for his age, and his id number. With dictionaries we can access items through keys. Let's look \nat the dictionary or dict we just created.   In bio, we have three items, Tom's name, his age, and his id number. For each item, we have a key; 'name', 'age', and 'id', that respectively associate with each value in the dictionary. Meaning, 'name' for 'Tom', 'age' for '19', and 'id' for '1234567'.   If we want to add more items into a list, we can do so as shown here. It's sort of similar to adding items to a list. Let's go back to our dictionary. This is what we have right now.  bio = { 'name' : 'Tom', 'age': '19', 'id' : '1234567'}  Let's say we want to add Tom's college major to the list. We can do so as shown here:  bio['major'] = 'Math'  The structure for the statement to add an item to a dictionary is as follows:  dictionaryname['key'] = 'value' . Obviously, as dictionaries can be of any type, we can make the values any type we want. We can print out values of a dictionary using : dictionaryname['key'].  If a value of an item in a dictionary is the same as a key in another dictionary, we can use that as a key. Meaning, let's say we have a dictionary for some U.S states. This is what the dict looks like:  state = {'California' : 'CA', 'Oregon' : 'OR', 'Washington' : 'WA'}  Let's say we have another dictionary that has a bunch of capital cities of states.    city = {'CA' : 'Sacremento', 'OR' : 'Salem', 'WA' : 'Olympia'}  As you can see, the values of the 'state' dictionary are the same as the keys for the 'city' dictionary. Therefore, let's say we want to print out the capital city of a certain state, we can do so in two ways.   print(city['CA'])\nprint(city[state['California']])  Both of these will print out:  Sacremento", 
            "title": "Lesson 5: Dictionaries"
        }, 
        {
            "location": "/lesson6/", 
            "text": "Lesson 6: Functions\n\n\nSo far, we have covered the basics of Python. Variables, data types, lists, loops, control structures, dictionaries. But now it's time for us to start creating our own functions, so that we can make more complex programs.\n\n\nWhat is a function? A \nfunction\n is basically something that takes in an input and produces and output. In programming, we use functions to do all sorts of different things. The question here is, how do we make functions in Python?\n\n\nLet's say we want to print out someone's name. Let's create a function that does that. In Python, the structure of a basic function is as follows. \n\n\ndef functionname( parameters):\n    body\n    return\n\n\n\nLet's break this down. The first word def, is a keyword in Python. When Python sees this word it knows that we are about to define a function. The 'functionname' can be whatever we want it to be. For a function to print someone's name, we might call the funciton printname. The 'parameters' are the input for the function. We can pass in parameters into a function, and then the function can use those parameters and give us an output. The 'body' is the code that would do whatever we want the function to do. The return, is what we use to return the output. If we do not have anything to return, we can simply just put return. Let's try making that printname function.\n\n\ndef printname( str ):\nprint(str)\nreturn\n\n\n\nNow, once we make a function, we need to call it. Calling a function basically means telling Python that we want to use it. Let's say I want to print out Tom's name using this function. \n\n\nprintname('Tom')\n\n\n\nI would type out the funciton and pass in the parameter, which in this case is a string, 'Tom'. \n\n\nAn important thing to remember is that parameters are passed in by reference. What that means is, is that the value of the actual parameters will change if we pass it into the function. Let's look at an example. Let's say we have a list of numbers. We want to create a function that will add more numbers to a list. \n\n\ndef addNum ( numList)\nnumList.append([5, 6, 7, 8])\nprint(\"Current vals\", numList)\nreturn\n\n\n\nLet's try calling the function.\n\n\nnumList = [1, 2, 3, 4]\naddNum(numList) \nprint(\"Current vals\", numList)\n\n\n\nThis is what will print out.\n\n\nCurrent values [1, 2, 3, [5, 6, 7, 8]]\nCurrent values [1, 2, 3, [5, 6, 7, 8]]\n\n\n\nIf we wanted to make sure that that reference didn't change, then we would have to create another reference inside our function.\n\n\ndef addNum ( numList)\nnumList = [5, 6, 7, 8]\nprint(\"Current vals\", numList)\nreturn\n\n\n\nLet's try calling the function.\n\n\nnumList = [1, 2, 3, 4]\naddNum(numList) \nprint(\"Current vals\", numList)\n\n\n\nThis is what would print out.\n\n\nCurrent values [1, 2, 3, 4]\nCurrent values [5, 6, 7, 8]", 
            "title": "Lesson 6"
        }, 
        {
            "location": "/lesson6/#lesson-6-functions", 
            "text": "So far, we have covered the basics of Python. Variables, data types, lists, loops, control structures, dictionaries. But now it's time for us to start creating our own functions, so that we can make more complex programs.  What is a function? A  function  is basically something that takes in an input and produces and output. In programming, we use functions to do all sorts of different things. The question here is, how do we make functions in Python?  Let's say we want to print out someone's name. Let's create a function that does that. In Python, the structure of a basic function is as follows.   def functionname( parameters):\n    body\n    return  Let's break this down. The first word def, is a keyword in Python. When Python sees this word it knows that we are about to define a function. The 'functionname' can be whatever we want it to be. For a function to print someone's name, we might call the funciton printname. The 'parameters' are the input for the function. We can pass in parameters into a function, and then the function can use those parameters and give us an output. The 'body' is the code that would do whatever we want the function to do. The return, is what we use to return the output. If we do not have anything to return, we can simply just put return. Let's try making that printname function.  def printname( str ):\nprint(str)\nreturn  Now, once we make a function, we need to call it. Calling a function basically means telling Python that we want to use it. Let's say I want to print out Tom's name using this function.   printname('Tom')  I would type out the funciton and pass in the parameter, which in this case is a string, 'Tom'.   An important thing to remember is that parameters are passed in by reference. What that means is, is that the value of the actual parameters will change if we pass it into the function. Let's look at an example. Let's say we have a list of numbers. We want to create a function that will add more numbers to a list.   def addNum ( numList)\nnumList.append([5, 6, 7, 8])\nprint(\"Current vals\", numList)\nreturn  Let's try calling the function.  numList = [1, 2, 3, 4]\naddNum(numList) \nprint(\"Current vals\", numList)  This is what will print out.  Current values [1, 2, 3, [5, 6, 7, 8]]\nCurrent values [1, 2, 3, [5, 6, 7, 8]]  If we wanted to make sure that that reference didn't change, then we would have to create another reference inside our function.  def addNum ( numList)\nnumList = [5, 6, 7, 8]\nprint(\"Current vals\", numList)\nreturn  Let's try calling the function.  numList = [1, 2, 3, 4]\naddNum(numList) \nprint(\"Current vals\", numList)  This is what would print out.  Current values [1, 2, 3, 4]\nCurrent values [5, 6, 7, 8]", 
            "title": "Lesson 6: Functions"
        }, 
        {
            "location": "/challenges/", 
            "text": "Challenges\n\n\nThe Number Guessing Game\n\n\nFor this activity, you will be making a number guessing game! The premise is that you will generate a random number in a certain range (1-1000 works best), and the user needs to guess the number. \n\n\nRunning the program:\n\n\nThe python script starts up, generating a random number. It \nprompts\n the user for a guess. There is a 99.9% chance that this guess will be wrong. If the guess is lower than the number generated,\n\n\ntoo low\n\n\n\nwill print. If the guess is higher than the number generated, \n\n\ntoo high\n\n\n\nwill print.\n\n\nAfter this, the user is again prompted for a guess. This \nrepeats\n until the user guesses the correct number.\n\n\nTry It Out!\n\n\nTry to write the script above using everything you've learned so far. It includes conditional statements and loops.\n\n\nIn order to do this, you need to import a library called random, which allows you to generate a random number in a certain range. At the top of your script, write\n\n\nimport random\n\n\n\nThis library has a function called \"randint\", taking in two parameters: the low bound, and the high bound. For example, if you want a number between 42 and 420, you would write\n\n\nrandomNumber = random.randint(42, 420)\n\n\n\nThis sets \"randomNumber\" to a random integer between 42 and 420.\n\n\nNow you have everything you need to write this script! First, try to write it by yourself, using everything you've learned so far. If you're having trouble, refer to the \npseudocode\n below. \n\n\nView Solution\n\n\n\n\n\nimport random\nimport math\n\nrand = random.randint(1,1000)\nhighorlow = ''\nguess = int(input('Guess a number between 1 and 1000\\n'))\n\nwhile(guess != rand):\n    if(guess \n<\n rand):\n        highorlow = 'too low'\n    else:\n        highorlow = 'too high'\n    guess = int(input(highorlow + ', Guess again!\\n'))\nprint('You got it!')", 
            "title": "Challenges"
        }, 
        {
            "location": "/challenges/#challenges", 
            "text": "", 
            "title": "Challenges"
        }, 
        {
            "location": "/challenges/#the-number-guessing-game", 
            "text": "For this activity, you will be making a number guessing game! The premise is that you will generate a random number in a certain range (1-1000 works best), and the user needs to guess the number.", 
            "title": "The Number Guessing Game"
        }, 
        {
            "location": "/challenges/#running-the-program", 
            "text": "The python script starts up, generating a random number. It  prompts  the user for a guess. There is a 99.9% chance that this guess will be wrong. If the guess is lower than the number generated,  too low  will print. If the guess is higher than the number generated,   too high  will print.  After this, the user is again prompted for a guess. This  repeats  until the user guesses the correct number.", 
            "title": "Running the program:"
        }, 
        {
            "location": "/challenges/#try-it-out", 
            "text": "Try to write the script above using everything you've learned so far. It includes conditional statements and loops.  In order to do this, you need to import a library called random, which allows you to generate a random number in a certain range. At the top of your script, write  import random  This library has a function called \"randint\", taking in two parameters: the low bound, and the high bound. For example, if you want a number between 42 and 420, you would write  randomNumber = random.randint(42, 420)  This sets \"randomNumber\" to a random integer between 42 and 420.  Now you have everything you need to write this script! First, try to write it by yourself, using everything you've learned so far. If you're having trouble, refer to the  pseudocode  below.   View Solution   \nimport random\nimport math\n\nrand = random.randint(1,1000)\nhighorlow = ''\nguess = int(input('Guess a number between 1 and 1000\\n'))\n\nwhile(guess != rand):\n    if(guess  <  rand):\n        highorlow = 'too low'\n    else:\n        highorlow = 'too high'\n    guess = int(input(highorlow + ', Guess again!\\n'))\nprint('You got it!')", 
            "title": "Try It Out!"
        }
    ]
}