{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to Python\n\n\nHere you will learn the basics of python.\n\n\nFAQs\n\n\n\n\nWhere do I run the code?\n\n\nYou can either \ninstall python\n  (Windows, Mac, and Linux) or \ncode online with CodeSkulptor\n (All Platforms ) \n\n\n\n\n\n\nWhat if I need help?\n \n\n\nWe're only \nan email\n away :D\n\n\n\n\n\n\nWhat if I'm not a part of SD Code?\n \n\n\nDon't worry about it! This resource is free to use by anyone!\n\n\n\n\n\n\nCan I host this on my website?\n\n\nSure, as long as you give credit and link it to our website\n\n\n\n\n\n\n\n\nCreators\n\n\nLead Curriculum Designer\n: Maleeha Imran\n\n\nWebsite Manager\n: Ronak Shah", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome-to-python", 
            "text": "Here you will learn the basics of python.", 
            "title": "Welcome to Python"
        }, 
        {
            "location": "/#faqs", 
            "text": "Where do I run the code?  You can either  install python   (Windows, Mac, and Linux) or  code online with CodeSkulptor  (All Platforms )     What if I need help?    We're only  an email  away :D    What if I'm not a part of SD Code?    Don't worry about it! This resource is free to use by anyone!    Can I host this on my website?  Sure, as long as you give credit and link it to our website", 
            "title": "FAQs"
        }, 
        {
            "location": "/#creators", 
            "text": "Lead Curriculum Designer : Maleeha Imran  Website Manager : Ronak Shah", 
            "title": "Creators"
        }, 
        {
            "location": "/lesson1/", 
            "text": "Welcome!\n\n\nIn our first lesson here we will be focusing on learning about \nvariables\n and \ndata types\n. \nLet's jump right in. \n\n\nSo what exactly is a variable? You can think of variables as a box where you can store a value. A \nvalue\n is information that is related a certain variable. \n\n\nstatement = \"Hello\"\n\n\n\nNow, we have a variable called statement, with the message \"Hello\" stored inside. Making variables is pretty simple in Python. Let's print that statement now:\n\n\nprint(statement)\n\n\n\nWhen you run your program, \"Hello\" should have been printed out. \nYou can create whatever variables you want, but there are a couple rules that you need to follow when naming your variables:\n\n\n\n\n\n\nVariable names cannot start with a number. Variable names can also only contain letters, numbers, and underscores. \n\n\n\n\n\n\nNo spaces should be in your variable names.\n\n\n\n\n\n\nThere are some words that Python has kept for programming functions or keywords, like for, not, try, as, if, and more. You cannot use those words when naming your variables.\n\n\n\n\n\n\nAlright, now that we know the rules, let's learn about the different types of data. Programs deal with data a lot, so it's a good idea to understand the different types of data in Python.\n\n\nVariable Types\n\n\nStrings:\n A string is a series of characters. The way you declare, or create a string is just like how we made the variable, statement from earlier; by placing whatever message we want to have in \"quotation marks\". \n\n\n\"String\"\n\n\n\nIntegers:\n In Python, we can multiply, divide, add, and subtract integers with ease. \n\n\n2*5 \n10\n\n2/1\n2\n\n2+5\n7\n\n2-1\n1\n\n\n\nFloats:\n These are numbers with decimal points. We can peform similar operations(+, -, *, /) on floats like we could on integers, without too much trouble.\n\n\n0.2 + 1.3\n1.5\n\n\n\nHowever, we may get a large number of decimal places in the answers to our calculations. Just try to ignore them for now, all Python is doing is trying to give us the most exact number.\n\n\n0.2 + 0.1\n.3000000004\n\n\n\nAlright, now we know about a couple of different data types in Python. Now let's see what we can do with that data. \n\n\nPrinting\n\n\nA \nmethod\n, is an action that the programming language you are using, whether it be Python or Java, can perform on a certain piece of data.\n\n\nFor example, let's say that I made a string, and I wanted to change the case(A or a) of certain letters in that string. I could use a couple of different methods to make that happen.\n\n\nmyName = \"ted martinez\"\nprint(myName.title())\n\n\n\nThe method I used is title(). When I use that method, this is what Python prints out.\n\n\nTed Martinez\n\n\n\nThat small dot in front of the word title, is what makes the title() method act on the variable, myName. Sometimes, certain methods will need more information to act, that is why there are parentheses following the word title. \n\n\nHere are some other methods you can use to change your strings.\n\n\nprint(myName.lower())\nprint(myName.upper())\n\n\n\nHere is what prints out:\n\n\nted martinez\nTED MARTINEZ\n\n\n\nYou can also combine strings together, using the + sign, as shown below.\n\n\nfirst_name = \"Ted\"\nlast_name = \"Martinez\"\nfull_name = first_name + \" \" +  last_name\nprint(full_name)\n\n\n\nWe added an extra \" \" so that there could be a space between the first name and the last name.\nPython should print this out:\n\n\n\"Ted Martinez\"\n\n\n\nIf you ever want to add a tab to your text, you can add \\t when printing out a string.\n\n\nprint(\"Hello\")\nprint(\"\\tHello\")\n\n\n\nThis should print out:\n\n\nHello\n    Hello\n\n\n\nYou can also have a string break into a new line by using \\n.\n\n\nprint(\"Hello\\nMy name is\\nTed\")\n\n\n\nThis should print out:\n\n\nHello\nMy name is\nTed", 
            "title": "Lesson 1"
        }, 
        {
            "location": "/lesson1/#welcome", 
            "text": "In our first lesson here we will be focusing on learning about  variables  and  data types . \nLet's jump right in.   So what exactly is a variable? You can think of variables as a box where you can store a value. A  value  is information that is related a certain variable.   statement = \"Hello\"  Now, we have a variable called statement, with the message \"Hello\" stored inside. Making variables is pretty simple in Python. Let's print that statement now:  print(statement)  When you run your program, \"Hello\" should have been printed out. \nYou can create whatever variables you want, but there are a couple rules that you need to follow when naming your variables:    Variable names cannot start with a number. Variable names can also only contain letters, numbers, and underscores.     No spaces should be in your variable names.    There are some words that Python has kept for programming functions or keywords, like for, not, try, as, if, and more. You cannot use those words when naming your variables.    Alright, now that we know the rules, let's learn about the different types of data. Programs deal with data a lot, so it's a good idea to understand the different types of data in Python.", 
            "title": "Welcome!"
        }, 
        {
            "location": "/lesson1/#variable-types", 
            "text": "Strings:  A string is a series of characters. The way you declare, or create a string is just like how we made the variable, statement from earlier; by placing whatever message we want to have in \"quotation marks\".   \"String\"  Integers:  In Python, we can multiply, divide, add, and subtract integers with ease.   2*5 \n10 2/1\n2 2+5\n7 2-1\n1  Floats:  These are numbers with decimal points. We can peform similar operations(+, -, *, /) on floats like we could on integers, without too much trouble.  0.2 + 1.3\n1.5  However, we may get a large number of decimal places in the answers to our calculations. Just try to ignore them for now, all Python is doing is trying to give us the most exact number.  0.2 + 0.1\n.3000000004  Alright, now we know about a couple of different data types in Python. Now let's see what we can do with that data.", 
            "title": "Variable Types"
        }, 
        {
            "location": "/lesson1/#printing", 
            "text": "A  method , is an action that the programming language you are using, whether it be Python or Java, can perform on a certain piece of data.  For example, let's say that I made a string, and I wanted to change the case(A or a) of certain letters in that string. I could use a couple of different methods to make that happen.  myName = \"ted martinez\"\nprint(myName.title())  The method I used is title(). When I use that method, this is what Python prints out.  Ted Martinez  That small dot in front of the word title, is what makes the title() method act on the variable, myName. Sometimes, certain methods will need more information to act, that is why there are parentheses following the word title.   Here are some other methods you can use to change your strings.  print(myName.lower())\nprint(myName.upper())  Here is what prints out:  ted martinez\nTED MARTINEZ  You can also combine strings together, using the + sign, as shown below.  first_name = \"Ted\"\nlast_name = \"Martinez\"\nfull_name = first_name + \" \" +  last_name\nprint(full_name)  We added an extra \" \" so that there could be a space between the first name and the last name.\nPython should print this out:  \"Ted Martinez\"  If you ever want to add a tab to your text, you can add \\t when printing out a string.  print(\"Hello\")\nprint(\"\\tHello\")  This should print out:  Hello\n    Hello  You can also have a string break into a new line by using \\n.  print(\"Hello\\nMy name is\\nTed\")  This should print out:  Hello\nMy name is\nTed", 
            "title": "Printing"
        }, 
        {
            "location": "/lesson2/", 
            "text": "Lesson 2 - Lists\n\n\nNow that we know a bit about variables and data types, we can now learn how we can put a bunch of data into one place and how to easily access it, through lists. \n\n\nSo what exactly is a \nlist\n? A \nlist\n is a group of items that are sorted in a certain order. A list usually contains more than one item, but those items can be whatever you want them to be. You can make a list of places you have visited or a list of numbers from 1-100, whatever you would like. \n\n\nLists\n\n\nIn Python, you can make a list using square brackets ([]), and inside your list, you can seperate the different items by using commas. For example, let's say we have a group that contains different flavors of ice cream. We want to put those flavors in a list. Let's call that list 'flavors'. \n\n\nflavors = ['chocolate', 'strawberry','vanilla']\n\n\n\nNow we have made a list of flavors. Let's print out that list.\n\n\nprint(flavors)\n\n\n\nWhen Python prints out the list flavors, its going to print the whole thing out, including the square brackets.\n\n\n['chocolate', 'strawberry', 'vanilla']\n\n\n\nHmm, I'm sure we could print that out in a nicer format. Let's learn how we can access different elements in a list.'\n\n\nThe elements in a list are ordered in a certain way, so we can tell Python to get a certain element from that list by telling Python the position, or index, of the element we want. To do that, all we need to do is write the name of our list, and follow it with the index in square brackets. For example, let's say I want vanilla ice cream:\n\n\nprint(flavors[2])\n\n\n\nNote: Most programming langauges including Python, consider the first item in a list, to have the position/index 0, not 1. The second item will be at index 1, the third at index 2, and so on. \n\n\nvanilla\n\n\n\nIf you want tot get the last item in a list, you can use the index, -1. \n\n\nprint(flavors[-1])\nvanilla\n\n\n\nYou can use the index -2, for the second last item in a list, and so on.\n\n\nYou can also use any String functions from our previous lesson on items in a list. Like the title() method below:\n\n\nprint(flavors[2].title())\nVanilla\n\n\n\nYou can use items in a list just like you would use any other variable.\n\n\nprint(\"My favorite ice cream flavor is \" + flavors[2])\nMy favorite ice cream flavor is vanilla\n\n\n\nChanging Items:\n In your future programs, you may need to change, add, or remove items from a list. Let's start, by saying, we want to change one of the flavors in our list, from vanilla to mint, but we do not want to change any other flavors. Here is our original list.   \n\n\nflavors = ['chocolate', 'strawberry','vanilla']\nprint(flavors)\n\n\n\nLet's change the value at index 2, from vanilla to mint.\n\n\nflavors[2] = 'mint'\nprint(flavors)\n\n\n\nHere is what happens when we print out our original list.\n\n\n['chocolate', 'strawberry', 'vanilla']\n\n\n\nAnd this is what happens when we print out our list after we changed vanilla to mint.\n\n\n['chocolate', 'strawberry', 'mint']\n\n\n\nAdding Items:\n As shown, you can change any value in a list.Now, let's say you wanted to add more items to your list. Let's say we wanted to add the flavor, berry, to our original list. We can do this in a couple different ways. \nOne way we can add an item is by using the append() method. This method will add an item to the end of our list. \n\n\nLet's print out original list again.\n\n\nprint(flavors)\n['chocolate', 'strawberry', 'vanilla']\n\n\n\nNow, let's try adding berry to the end of our flavors list.\n\n\nflavors.append('berry')\nprint(flavors)\n\n\n\nUsing the append() method will not have any effect on the other items in a list.\n\n\n['chocolate', 'strawberry', 'vanilla', 'berry']\n\n\n\nWe can use the append() method to fill out an empty list too.\nSide Note: You can make comments in Python using the # symbol, to make it easier to read through your code.\n\n\nflavors = [] #this is an empty list\nflavors.append('chocolate')\nflavors.append('strawberry')\nflavors.append('vanilla')\nflavors.append('berry')\n\nprint(flavors)\n\n\n\nThis is what will print out:\n\n\n['chocolate', 'strawberry', 'vanilla', 'berry']\n\n\n\nYou can also use the insert() method to add different items to your list. This method allows you to add an item in any index in the list. Let's try adding another flavor, mint, to the beginning of our original list.\n\n\nflavors = ['chocolate', 'strawberry', 'vanilla']\nflavors.insert(0, 'mint')\nprint(flavors)\n\n\n\nThis is what will print out:\n\n\n['mint', 'chocolate', 'strawberry', 'vanilla']\n\n\n\nRemoving Items:\n Okay, now let's say, we don't want to include the mint flavor in our list anymore. Let's learn how to remove an item from a list. You can remove an item from a list using the del statement.\n\n\nflavors = ['mint', chocolate', 'strawberry', 'vanilla']\nprint(flavors)\n\ndel flavors[0]\nprint(flavors)\n\n\n\nThis is what will print out:\n\n\n['mint', 'chocolate', 'strawberry', 'vanilla']\n['chocolate', 'strawberry', 'vanilla']\n\n\n\nYou can also use the remove() method, to remove a value from a list.\n\n\nflavors = ['mint', chocolate', 'strawberry', 'vanilla']\nprint(flavors)\n\nflavors.remove('mint')\nprint(flavors)\n\n\n\nThis is what will print out:\n\n\n['mint', 'chocolate', 'strawberry', 'vanilla']\n['chocolate', 'strawberry', 'vanilla']\n\n\n\nWe can still work with items that we store in a list. \n\n\nflavors = ['mint', chocolate', 'strawberry', 'vanilla']\nprint(flavors)\n\nfav_flavor = 'mint'\nflavors.remove(flavors[0]\nprint(flavors)\nprint(\"\\nMy favorite flavor is \" + fav_flavor) \n# the \\n is to print that statement on a new line\n\n\n\nThis is what will print out:\n\n\n['mint', 'chocolate', 'strawberry', 'vanilla']\n['chocolate', 'strawberry', 'vanilla']\n\nMy favorite flavor is vanilla\n\n\n\nYou can also remove and item but still work with it, using the pop() method. \n\n\nflavors = ['mint', chocolate', 'strawberry', 'vanilla']\nfav_flavor = flavors.pop(0)\nprint(\"My favorite flavor is \" + fav_flavor)\n\n\n\nThis is what will print out:\n\n\nMy favorite flavor is mint\n\n\n\nIf you don't put a certain index in the parentheses of the pop() method, it will remove the item at the end of the list. \n\n\nOrdering a List:\n There are also methods that you can use to order the items in your list. Let's say we want to order the flavors in our list alphabetically. We can use the sort method to do so:\n\n\nflavors = ['mint', chocolate', 'strawberry', 'vanilla']\nflavors.sort()\nprint(flavors)\n\n\n\nThis is what will print out.\n\n\n['chocolate', 'mint\", 'strawberry', 'vanilla']\n\n\n\nYou can also print the list in a reverse alphabetical order, by passing an argument in the sort method reverse, and setting it to TRUE.\n\n\nflavors = ['mint', chocolate', 'strawberry', 'vanilla']\nflavors.sort(reverse = True)\nprint(flavors)\n\n\n\nThis is what will print out.\n\n\n['vanilla', 'strawberry', 'mint', 'chocolate']\n\n\n\nYou can also use a list in a sorted order, without having to change the order of your original list, by using the sorted method. \n\n\nflavors = ['mint', chocolate', 'strawberry', 'vanilla']\nprint(flavors)\nprint(sorted(flavors))\n\n\n\nThis is what will print out:\n\n\n['mint', chocolate', 'strawberry', 'vanilla']\n['chocolate', 'mint\", 'strawberry', 'vanilla']\n\n\n\nYou can print a list out in the reverse of its original order by using the reverse() method. \n\n\nflavors = ['mint', chocolate', 'strawberry', 'vanilla']\nprint(flavors)\n\nflavors.reverse()\nprint(flavors)\n\n\n\nThis is what will print out:\n\n\n['mint', chocolate', 'strawberry', 'vanilla']\n['vanilla', 'strawberry', 'chocolate', 'mint']\n\n\n\nIf you want to find out the number of items in a list, or the length of a list, you can use the len() function:\n\n\nflavors = ['mint', chocolate', 'strawberry', 'vanilla']\nlen(flavors)\n4\n\n\n\nThat's it! Now you know the basic concepts of lists.", 
            "title": "Lesson 2"
        }, 
        {
            "location": "/lesson2/#lesson-2-lists", 
            "text": "Now that we know a bit about variables and data types, we can now learn how we can put a bunch of data into one place and how to easily access it, through lists.   So what exactly is a  list ? A  list  is a group of items that are sorted in a certain order. A list usually contains more than one item, but those items can be whatever you want them to be. You can make a list of places you have visited or a list of numbers from 1-100, whatever you would like.", 
            "title": "Lesson 2 - Lists"
        }, 
        {
            "location": "/lesson2/#lists", 
            "text": "In Python, you can make a list using square brackets ([]), and inside your list, you can seperate the different items by using commas. For example, let's say we have a group that contains different flavors of ice cream. We want to put those flavors in a list. Let's call that list 'flavors'.   flavors = ['chocolate', 'strawberry','vanilla']  Now we have made a list of flavors. Let's print out that list.  print(flavors)  When Python prints out the list flavors, its going to print the whole thing out, including the square brackets.  ['chocolate', 'strawberry', 'vanilla']  Hmm, I'm sure we could print that out in a nicer format. Let's learn how we can access different elements in a list.'  The elements in a list are ordered in a certain way, so we can tell Python to get a certain element from that list by telling Python the position, or index, of the element we want. To do that, all we need to do is write the name of our list, and follow it with the index in square brackets. For example, let's say I want vanilla ice cream:  print(flavors[2])  Note: Most programming langauges including Python, consider the first item in a list, to have the position/index 0, not 1. The second item will be at index 1, the third at index 2, and so on.   vanilla  If you want tot get the last item in a list, you can use the index, -1.   print(flavors[-1])\nvanilla  You can use the index -2, for the second last item in a list, and so on.  You can also use any String functions from our previous lesson on items in a list. Like the title() method below:  print(flavors[2].title())\nVanilla  You can use items in a list just like you would use any other variable.  print(\"My favorite ice cream flavor is \" + flavors[2])\nMy favorite ice cream flavor is vanilla  Changing Items:  In your future programs, you may need to change, add, or remove items from a list. Let's start, by saying, we want to change one of the flavors in our list, from vanilla to mint, but we do not want to change any other flavors. Here is our original list.     flavors = ['chocolate', 'strawberry','vanilla']\nprint(flavors)  Let's change the value at index 2, from vanilla to mint.  flavors[2] = 'mint'\nprint(flavors)  Here is what happens when we print out our original list.  ['chocolate', 'strawberry', 'vanilla']  And this is what happens when we print out our list after we changed vanilla to mint.  ['chocolate', 'strawberry', 'mint']  Adding Items:  As shown, you can change any value in a list.Now, let's say you wanted to add more items to your list. Let's say we wanted to add the flavor, berry, to our original list. We can do this in a couple different ways. \nOne way we can add an item is by using the append() method. This method will add an item to the end of our list.   Let's print out original list again.  print(flavors)\n['chocolate', 'strawberry', 'vanilla']  Now, let's try adding berry to the end of our flavors list.  flavors.append('berry')\nprint(flavors)  Using the append() method will not have any effect on the other items in a list.  ['chocolate', 'strawberry', 'vanilla', 'berry']  We can use the append() method to fill out an empty list too.\nSide Note: You can make comments in Python using the # symbol, to make it easier to read through your code.  flavors = [] #this is an empty list\nflavors.append('chocolate')\nflavors.append('strawberry')\nflavors.append('vanilla')\nflavors.append('berry')\n\nprint(flavors)  This is what will print out:  ['chocolate', 'strawberry', 'vanilla', 'berry']  You can also use the insert() method to add different items to your list. This method allows you to add an item in any index in the list. Let's try adding another flavor, mint, to the beginning of our original list.  flavors = ['chocolate', 'strawberry', 'vanilla']\nflavors.insert(0, 'mint')\nprint(flavors)  This is what will print out:  ['mint', 'chocolate', 'strawberry', 'vanilla']  Removing Items:  Okay, now let's say, we don't want to include the mint flavor in our list anymore. Let's learn how to remove an item from a list. You can remove an item from a list using the del statement.  flavors = ['mint', chocolate', 'strawberry', 'vanilla']\nprint(flavors)\n\ndel flavors[0]\nprint(flavors)  This is what will print out:  ['mint', 'chocolate', 'strawberry', 'vanilla']\n['chocolate', 'strawberry', 'vanilla']  You can also use the remove() method, to remove a value from a list.  flavors = ['mint', chocolate', 'strawberry', 'vanilla']\nprint(flavors)\n\nflavors.remove('mint')\nprint(flavors)  This is what will print out:  ['mint', 'chocolate', 'strawberry', 'vanilla']\n['chocolate', 'strawberry', 'vanilla']  We can still work with items that we store in a list.   flavors = ['mint', chocolate', 'strawberry', 'vanilla']\nprint(flavors)\n\nfav_flavor = 'mint'\nflavors.remove(flavors[0]\nprint(flavors)\nprint(\"\\nMy favorite flavor is \" + fav_flavor) \n# the \\n is to print that statement on a new line  This is what will print out:  ['mint', 'chocolate', 'strawberry', 'vanilla']\n['chocolate', 'strawberry', 'vanilla']\n\nMy favorite flavor is vanilla  You can also remove and item but still work with it, using the pop() method.   flavors = ['mint', chocolate', 'strawberry', 'vanilla']\nfav_flavor = flavors.pop(0)\nprint(\"My favorite flavor is \" + fav_flavor)  This is what will print out:  My favorite flavor is mint  If you don't put a certain index in the parentheses of the pop() method, it will remove the item at the end of the list.   Ordering a List:  There are also methods that you can use to order the items in your list. Let's say we want to order the flavors in our list alphabetically. We can use the sort method to do so:  flavors = ['mint', chocolate', 'strawberry', 'vanilla']\nflavors.sort()\nprint(flavors)  This is what will print out.  ['chocolate', 'mint\", 'strawberry', 'vanilla']  You can also print the list in a reverse alphabetical order, by passing an argument in the sort method reverse, and setting it to TRUE.  flavors = ['mint', chocolate', 'strawberry', 'vanilla']\nflavors.sort(reverse = True)\nprint(flavors)  This is what will print out.  ['vanilla', 'strawberry', 'mint', 'chocolate']  You can also use a list in a sorted order, without having to change the order of your original list, by using the sorted method.   flavors = ['mint', chocolate', 'strawberry', 'vanilla']\nprint(flavors)\nprint(sorted(flavors))  This is what will print out:  ['mint', chocolate', 'strawberry', 'vanilla']\n['chocolate', 'mint\", 'strawberry', 'vanilla']  You can print a list out in the reverse of its original order by using the reverse() method.   flavors = ['mint', chocolate', 'strawberry', 'vanilla']\nprint(flavors)\n\nflavors.reverse()\nprint(flavors)  This is what will print out:  ['mint', chocolate', 'strawberry', 'vanilla']\n['vanilla', 'strawberry', 'chocolate', 'mint']  If you want to find out the number of items in a list, or the length of a list, you can use the len() function:  flavors = ['mint', chocolate', 'strawberry', 'vanilla']\nlen(flavors)\n4  That's it! Now you know the basic concepts of lists.", 
            "title": "Lists"
        }
    ]
}